#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 30

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Clear_all_BLE_profiles {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <10 11 12 13 19 20 21 18>;
        };

        to_AML {
            bindings = <&lt_to_layer_0 3 0>;
            key-positions = <32 31>;
        };
    };

    macros {
        double_kp_00: double_kp_00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_NUMBER_0 &kp KP_NUMBER_0>;
            label = "double_kp_00";
        };

        kp_left_arrow: kp_left_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp H>;
            label = "kp_left_arrow";
        };

        kp_down_arrow: kp_down_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp J>;
            label = "kp_down_arrow";
        };

        kp_up_arrow: kp_up_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp K>;
            label = "kp_up_arrow";
        };

        kp_right_arrow: kp_right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp L>;
            label = "KP_RIGHT_ARROW";
        };

        ps: ps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp LS(B) &kp LS(S) &kp N2 &kp N2 &kp N5 &kp N7>;
            label = "PS";
        };

        ID: ID {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0 &kp N1 &kp N2 &kp N3 &kp N2 &kp N7 &kp AT &kp B &kp S &kp LS(R)>;
            label = "ID";
        };

        mb2_then_return_default_layer: mb2_then_default_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB2>, <&macro_wait_time 250>, <&to 0>;

            label = "MB2_THEN_RETURN_DEFAULT_RAYER";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&double_kp_00>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_up_down: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <300>;  // デバウンスと暴走防止
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W          &kp E         &kp R                &kp T                                         &kp Y        &kp U  &kp I     &kp O     &kp P
&kp A               &kp S          &kp D         &kp F                &kp G        &kp LG(F5)      &kp SEMICOLON    &kp H        &kp J  &kp K     &kp L     &kp ENTER
&kp Z               &kp X          &kp C         &kp V                &kp B        &kp RCTRL       &kp BACKSPACE    &kp N        &kp M  &mkp MB1  &mkp MB2  &kp DELETE
&mt LEFT_SHIFT ESC  &kp RIGHT_ALT  &kp LEFT_GUI  &lt 3 LC(LS(SPACE))  &lt 2 SPACE  &lt 1 TAB       &lt 1 LS(LC(A))  &lt 2 RC(P)                             &mt RSHIFT RG(F)
            >;

            sensor-bindings = <&encoder_msc_up_down>;
        };

        Symbol {
            bindings = <
&kp F6            &kp F7             &kp F8          &kp F9           &kp F10                                                   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS       &kp TILDE         &kp PIPE
&kp EXCLAMATION   &kp DOUBLE_QUOTES  &kp_up_arrow    &kp HASH         &kp AMPERSAND       &kp LC(B)                  &kp RA(B)  &kp SINGLE_QUOTE      &kp AT_SIGN            &kp UNDERSCORE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp LEFT_SHIFT    &kp_left_arrow     &kp_down_arrow  &kp_right_arrow  &kp LS(LG(SPACE))   &kp LA(R)                  &kp RA(N)  &kp RC(RS(Z))         &kp SEMICOLON          &kp COMMA       &kp PERIOD        &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_ALT       &kp LEFT_GUI    &kp LC(LG(F5))   &kp LS(LC(LG(F5)))  &kp LC(LS(LA(LG(C))))      &kp RG(C)  &kp RC(Z)                                                                      &kp RC(K)
            >;

            sensor-bindings = <&inc_dec_kp BACKSPACE DELETE>;
        };

        FUNCTION {
            bindings = <
&kp LC(T)         &kp LC(W)        &kp LC(R)      &kp LC(LA(TAB))       &kp LS(LC(TAB))                                    &kp RC(TAB)         &kp RS(RA(RC(TAB)))  &kp RG(F5)      &kp PAGE_UP      &mt RIGHT_ALT RC(V)
&kp LC(A)         &kp LA(LG(M))    &kp LA(PLUS)   &kp LS(LG(A))         &kp LC(EQUAL)    &kp LC(N0)         &trans         &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)  &kp UP_ARROW    &kp PAGE_DOWN    &mt RIGHT_SHIFT RG(V)
&kp LEFT_SHIFT    &kp LA(AT_SIGN)  &kp LA(MINUS)  &kp LA(LEFT_BRACKET)  &kp LC(MINUS)    &trans             &kp BACKSPACE  &kp RIGHT_ALT       &kp LEFT_ARROW       &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RIGHT_CONTROL
&kp LEFT_CONTROL  &kp LEFT_ALT     &kp LEFT_GUI   &trans                &trans           &kp LA(LG(F))      &kp RC(X)      &kp RC(C)                                                                 &kp RC(F)
            >;

            sensor-bindings = <&inc_dec_kp LC(TAB) LC(LS(TAB))>;
        };

        NUM {
            bindings = <
&kp LS(TAB)           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp TAB                                          &trans             &trans                    &kp PERCENT      &kp TILDE     &trans
&kp LEFT_ARROW        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp RIGHT_ARROW  &kp ESC        &trans           &kp KP_PLUS        &kp KP_MINUS              &kp KP_ASTERISK  &kp KP_SLASH  &kp ENTER
&mt LEFT_SHIFT COLON  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_EQUAL     &trans         &kp BACKSPACE    &kp INT_YEN        &mt RIGHT_CONTROL DOLLAR  &kp COMMA        &kp KP_DOT    &kp DELETE
&kp KP_NUMBER_0       &double_kp_00    &kp SPACE        &kp LC(LS(A))    &kp LA(F4)       &kp LC(R)      &kp RC(PAGE_UP)  &kp RC(PAGE_DOWN)                                                           &mt LCTRL PERCENT
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans    &trans                          &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans    &trans                          &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &mkp MB1  &mb2_then_return_default_layer  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
