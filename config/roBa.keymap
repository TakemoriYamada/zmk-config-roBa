#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 70

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&double_kp_00 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        Clear_all_BLE_profiles {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <10 11 12 13 19 20 21 18>;
        };

        caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <35 36>;
        };
    };

    macros {
        double_kp_00: double_kp_00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_NUMBER_0 &kp KP_NUMBER_0>;
            label = "double_kp_00";
        };

        kp_left_arrow: kp_left_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp H>;
            label = "kp_left_arrow";
        };

        kp_down_arrow: kp_down_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp J>;
            label = "kp_down_arrow";
        };

        kp_up_arrow: kp_up_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp K>;
            label = "kp_up_arrow";
        };

        kp_right_arrow: kp_right_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Z &kp L>;
            label = "KP_RIGHT_ARROW";
        };

        ps: ps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp LS(B) &kp LS(S) &kp N2 &kp N2 &kp N5 &kp N7>;
            label = "PS";
        };

        ID: ID {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0 &kp N1 &kp N2 &kp N3 &kp N2 &kp N7 &kp AT &kp B &kp S &kp LS(R)>;
            label = "ID";
        };

        mb2_then_return_default_layer: mb2_then_default_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB2>, <&macro_wait_time 250>, <&to 0>;

            label = "MB2_THEN_RETURN_DEFAULT_RAYER";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&double_kp_00>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_up_down: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W     &kp E         &kp R             &kp T                                                       &kp Y                &kp U  &kp I     &kp O        &mt RIGHT_SHIFT P
&mt LEFT_ALT A    &kp S     &kp D         &kp F             &kp G        &kp LC(UP_ARROW)      &kp SEMICOLON            &kp H                &kp J  &kp K     &kp L        &mt RCTRL ENTER
&mt LEFT_SHIFT Z  &kp X     &kp C         &kp V             &kp B        &kp LANGUAGE_1        &kp BACKSPACE            &kp N                &kp M  &mkp MB1  &lt 3 MINUS  &kp DELETE
&mt LCTRL ESC     &kp RALT  &kp LEFT_GUI  &lt 3 LANGUAGE_2  &lt 2 SPACE  &lt 1 TAB             &lt 1 RG(RS(RA(RC(F))))  &lt 2 RG(RS(COLON))                                &kp RG(SPACE)
            >;

            sensor-bindings = <&encoder_msc_up_down>;
        };

        Symbol {
            bindings = <
&kp F6            &kp F7           &kp F8          &kp F9             &kp F10                                                              &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS     &kp EQUAL         &kp NON_US_BACKSLASH
&kp GRAVE         &kp EXCLAMATION  &kp_up_arrow    &kp AT             &kp HASH           &trans                     &trans                 &kp CARET             &kp AMPERSAND          &kp ASTERISK  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp LEFT_SHIFT    &kp_left_arrow   &kp_down_arrow  &kp_right_arrow    &kp LG(LC(SPACE))  &trans                     &kp RG(RS(Z))          &kp SEMICOLON         &kp SQT                &kp COMMA     &kp PERIOD        &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_ALT     &kp LEFT_GUI    &kp LG(LA(SPACE))  &kp LA(SPACE)      &kp LS(LC(LG(LA(X))))      &kp RG(RC(RA(RS(C))))  &kp RG(Z)                                                                    &kp RG(L)
            >;

            sensor-bindings = <&inc_dec_kp BACKSPACE DELETE>;
        };

        FUNCTION {
            bindings = <
&kp LG(T)         &kp LG(W)                   &kp LG(R)           &kp LC(LEFT_ARROW)           &kp LS(LC(TAB))                                       &kp RC(TAB)           &kp RC(RIGHT_ARROW)    &kp RC(UP_ARROW)  &kp PAGE_UP      &kp RG(V)
&kp LG(A)         &kp LC(LA(LG(LEFT_ARROW)))  &kp LA(LC(A))       &kp LC(LA(LG(RIGHT_ARROW)))  &kp LG(PLUS)     &kp LG(NUMBER_0)      &trans         &kp RG(LEFT_BRACKET)  &kp RG(RIGHT_BRACKET)  &kp UP_ARROW      &kp PAGE_DOWN    &mt RIGHT_SHIFT LG(LC(V))
&kp LEFT_SHIFT    &kp LA(LC(LEFT_ARROW))      &kp LC(DOWN_ARROW)  &kp LA(LC(RIGHT_ARROW))      &kp LG(MINUS)    &trans                &kp BACKSPACE  &kp RIGHT_ALT         &kp LEFT_ARROW         &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp RIGHT_COMMAND
&kp LEFT_CONTROL  &kp LEFT_ALT                &kp LEFT_GUI        &kp LA(LC(D))                &kp LC(LA(F))    &kp LC(LA(G))         &kp RG(X)      &kp RG(C)                                                                       &mt RCTRL LG(F)
            >;

            sensor-bindings = <&inc_dec_kp LC(TAB) LC(LS(TAB))>;
        };

        NUM {
            bindings = <
&kp LS(TAB)                &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp TAB                                                        &trans       &trans        &trans                  &trans        &trans
&mt LEFT_SHIFT LEFT_ARROW  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp RIGHT_ARROW       &kp ESC                   &trans         &kp KP_PLUS  &kp KP_MINUS  &kp KP_ASTERISK         &kp KP_SLASH  &mt RIGHT_SHIFT ENTER
&mt LEFT_SHIFT COLON       &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_EQUAL          &kp LG(LS(O))             &kp BACKSPACE  &kp INT_YEN  &kp DOLLAR    &mt RIGHT_ALT KP_COMMA  &kp KP_DOT    &kp DELETE
&kp KP_NUMBER_0            &double_kp_00    &kp SPACE        &kp LG(LS(N5))   &kp LG(LS(NUMBER_4))  &kp LS(LG(NUMBER_2))      &trans         &trans                                                           &mt RCTRL PERCENT
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans    &trans                          &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans    &trans                          &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &mkp MB1  &mb2_then_return_default_layer  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp RIGHT_ALT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                 &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
